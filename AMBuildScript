# vim: set sts=2 ts=8 sw=2 tw=99 et ft=python:
import os, shutil

from ambuild2 import run

def Normalize(path):
  return os.path.abspath(os.path.normpath(path))

# This will import helpers from hl2sdk-manifests/SdkHelpers.ambuild
hl2sdk_manifests_dest = Normalize(builder.sourcePath + '/hl2sdk-manifests/')

if not builder.options.hl2sdk_manifest:
  if not os.path.exists(hl2sdk_manifests_dest):
    raise Exception('HL2SDK Manifests directory not found! Set --hl2sdk-manifest-path or copy hl2sdk-manifests to the current folder.')
else:
  hl2sdk_manifests_root = Normalize(builder.options.hl2sdk_manifest + '/')
  if not os.path.exists(hl2sdk_manifests_dest):
    shutil.copytree(hl2sdk_manifests_root, hl2sdk_manifests_dest)
  else:
    print('HL2SDK Manifests already present, skipping copy.')

SdkHelpers = builder.Eval('hl2sdk-manifests/SdkHelpers.ambuild', {
  'Project': 'sm-extension'
})

class ExtensionConfig(object):
  def __init__(self):
    self.sdk_manifests = []
    self.sdks = {}
    self.sdk_targets = []
    self.all_targets = []
    self.sm_root = None
    self.mms_root = None
    self.libsafetyhook = {}
    self.spcomp_bin = None

    if builder.options.targets:
      archs = builder.options.targets.split(',')
    else:
      archs = ['x86']

    for arch in archs:
      try:
        cxx = builder.DetectCxx(target_arch=arch)
        self.all_targets.append(cxx)
      except Exception as e:
        if builder.options.targets:
          raise
        print(f"Skipping target {arch}: {e}")

    if not self.all_targets:
      raise Exception('No suitable C/C++ compiler detected.')

  def detectSDKs(self):
    sdk_list = [s for s in builder.options.sdks.split(',') if s]
    SdkHelpers.findSdks(builder, self.all_targets, sdk_list)

    self.sdks = SdkHelpers.sdks
    self.sdk_manifests = SdkHelpers.sdk_manifests
    self.sdk_targets = SdkHelpers.sdk_targets

  def detectSMAndMM(self):
    # SourceMod root
    if builder.options.sm_path:
      self.sm_root = Normalize(builder.options.sm_path)
    else:
      raise Exception("Please pass --sm-path to specify SourceMod path")
    if not os.path.isdir(self.sm_root):
      raise Exception(f"SourceMod path {self.sm_root} missing")

    # Metamod
    if builder.options.mms_path:
      self.mms_root = Normalize(builder.options.mms_path)
    else:
      raise Exception("Please pass --mms-path to specify Metamod:Source path")
    if not os.path.isdir(self.mms_root):
      raise Exception(f"Metamod:Source path {self.mms_root} missing")

  def configure(self):
    for cxx in self.all_targets:
      self.configure_cxx(cxx)

  def configure_cxx(self, cxx):
    if builder.options.opt == '1':
      cxx.defines += ['NDEBUG']
    if builder.options.debug == '1':
      cxx.defines += ['DEBUG', '_DEBUG']

    # C++ standard
    if cxx.family == 'msvc':
      cxx.cxxflags += ['/std:c++17']
    else:
      cxx.cxxflags += ['-std=c++17']

    # platform
    if cxx.target.platform == 'windows':
      cxx.defines += ['WIN32', '_WINDOWS']
    elif cxx.target.platform == 'linux':
      cxx.defines += ['_LINUX', 'POSIX']

    cxx.includes += [
      os.path.join(self.sm_root, 'public'),
      os.path.join(self.sm_root, 'public', 'extensions'),
      os.path.join(self.sm_root, 'sourcepawn', 'include'),
      os.path.join(self.sm_root, 'public', 'amtl', 'amtl'),
      os.path.join(self.sm_root, 'public', 'amtl'),
    ]

  def ConfigureForHL2(self, context, binary, sdk):
    cxx = binary.compiler
    cxx.cxxincludes += [
      os.path.join(self.mms_root, 'core'),
      os.path.join(self.mms_root, 'core', 'sourcehook'),
    ]
    SdkHelpers.configureCxx(context, binary, sdk)
    return binary

  def HL2Library(self, context, compiler, name, sdk):
    binary = compiler.Library(name)
    self.ConfigureForHL2(context, binary, sdk)
    return binary

Extension = ExtensionConfig()
Extension.detectSDKs()
Extension.detectSMAndMM()
Extension.configure()

# pull in safetyhook if needed
safetyhook_dest = Normalize(builder.sourcePath + '/safetyhook/')
if not os.path.exists(safetyhook_dest):
  shutil.copytree(os.path.join(Extension.sm_root, 'public', 'safetyhook'), safetyhook_dest)

SafetyHook = builder.Eval('safetyhook/AMBuilder', {})
Extension.libsafetyhook = SafetyHook.get('libsafetyhook', {})

# default targets to build
builder.targets = builder.CloneableList(Extension.all_targets)

BuildScripts = ['AMBuilder']

if builder.backend == 'amb2':
  BuildScripts += ['PackageScript']

builder.Build(BuildScripts, {'Extension': Extension})
